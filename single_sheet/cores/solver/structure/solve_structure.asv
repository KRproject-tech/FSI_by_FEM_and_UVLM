%% 変数抽出
X_vec = h_X_vec(:,i_time);
q_vec = X_vec(1:N_q_all,1);
dt_q_vec = X_vec(N_q_all+1:end,1);





%% 時間発展 (Eulerの予測子修正子法)

%%[*] 流体力ベクトル：[p] = p_lift + Mf1*dt^2_q + (Mf2_1*(dt_r - Vin - Vwake)^T*dt_ni + Mf2_2) 

%%[0] 流体力の線形補間 (Mf2_2)
Qf_p_global_t = @( time) (Qf_p_global - old_Qf_p_global)*(time - time_fluid)/d_t_wake + Qf_p_global_a;

Qf_p_global_tv_n =  Qf_p_global_t( time);
h_Qf_p_global_t(:,i_time) = Qf_p_global_tv_n;


%%[1] ( -(τx*dxΓ + τy*dyΓ)*dt_rc ) 
Qf_p_lift2_global_t = @( time) (Qf_p_lift2_mat_global - old_Qf_p_lift2_mat_global)*(time - time_fluid)/d_t_wake + Qf_p_lift2_mat_global_a;

Qf_p_lift2_global_tv_n = Qf_p_lift2_global_t( time);


%%[2] 付加質量マトリックスの線形補間 (Mf1)
Qf_p_mat_global_t = @( time) (Qf_p_mat_global - old_Qf_p_mat_global)*(time - time_fluid)/d_t_wake + Qf_p_mat_global_a;

Qf_p_mat_global_tv_n = Qf_p_mat_global_t( time);

%%[3] 流体力の線形補間 (Mf2_1)
Qf_p_mat0_global_t = @( time) (Qf_p_mat0_global - old_Qf_p_mat0_global)*(time - time_fluid)/d_t_wake + Qf_p_mat0_global_a;

Qf_p_mat0_global_tv_n = Qf_p_mat0_global_t( time);


%% 流体力計算
%%[*] 単位法線ベクトル算出
generate_dt_n_vec;


%%[*] コロケーション点の変位速度

rc_vec = Sc_mat_col_global*q_vec;
rc_vec = reshape( rc_vec, 3, []).';

dt_rc_vec = Sc_mat_col_global*dt_q_vec;
dt_rc_vec = reshape( dt_rc_vec, 3, []).';





if ~exist( 'Gamma_wake', 'var')
    
   V_wake_plate = 0; 
   dt_Amat2_Gamma = 0;
   dt_Amat1 = 0;
   Gamma = 0;
end



Qf_p_mat0_global_t_n = Qf_p_mat0_global_tv_n*( sum( (dt_rc_vec - V_in - V_wake_plate - dt_Amat2_Gamma).*dt_n_vec_i, 2) - dt_Amat1*Gamma);
Qf_p_lift2_global_t_n = Qf_p_lift2_global_tv_n*reshape( dt_rc_vec.', [], 1); 

%% 予測子計算 (新しい時刻の状態を求める)


%%[0] 粘弾性ベクトルの組立 Qe^(n)
flag_output = 1;                                                            %% 剛性行列算出の有効化
generate_stiff_matrices;

Qk_global_n = Qk_global;
Qe_global_n = Qe_global;
dq_Qe_global_n = dq_Qe_global;
Qd_global_n = Qd_global;
Qd_theta_global_n = Qd_theta_global;
J_global_1_n = J_global_1;
J_global_2_n = J_global_2;



%%[*] 付加質量補正解法
%%%
%%% F. Belanger, M.P. Paidoussis, E. de Langre, Time-marching analysis of
%%% fluid-coupled system with large added mass, AIAA Journal, 33 (1995), pp. 752-755.
%%%
if i_time <= 2

    dtt_q_vec = 0;
else
        
    dtt_q_vec = (dt_q_vec - old_dt_q_vec)/d_t;        
end

if added_mass_compensate_flag
        
    d_M_global = beta_A*(1/mu_m*M_global);
    d_Qf_global = beta_A*(1/mu_m*M_global)*(dt_q_vec - old_dt_q_vec)/d_t;    
    
    old_dt_q_vec = dt_q_vec;
else
    d_M_global = 0;
    d_Qf_global = 0;
end




%%[1] 予測子計算
%%[1-0] 質量行列     : M
m_global_struct.M_global = M_global + d_M_global + J_global_1_n - Qf_p_mat_global_tv_n;
%%[1-1] 体積力       : Q_f
qf_global_struct.Qf_global = Qf_global + d_Qf_global + Qf_time_global*q_in_norm( time) + Qf_p_global_tv_n + Qf_p_mat0_global_t_n + Qf_p_lift2_global_t_n;
%%[1-2] dq_Qe(q(n))
dq_qe_global_struct.dq_Qe_global = dq_Qe_global_n;
%%[1-3] 剛性力       : Q_e
qe_global_struct.Qe_global = Qe_global_n + Qk_global_n;
%%[1-4] 減衰力       : Q_d
qd_global_struct.Qd_global = Qd_global_n + Qd_theta_global_n + J_global_2_n;


[ X_vec_p, out1] = new_X_func_FAST( X_vec, m_global_struct, qf_global_struct, dq_qe_global_struct, qe_global_struct, qd_global_struct, var_param, 0, []);

                                

                                
                                
                                
                                

%% 修正子計算 (新しい時刻の剛性力 Qe^(n+1) の元で解く)

q_vec = X_vec_p(1:N_q_all,1);
dt_q_vec = X_vec_p(N_q_all+1:end,1);


%%[*] 単位法線ベクトル算出
generate_dt_n_vec;


%%[*] コロケーション点の変位速度

dt_rc_vec = Sc_mat_col_global*dt_q_vec;
dt_rc_vec = reshape( dt_rc_vec, 3, []).';


%%[*] t+dtでの流体力を予測
%%[*] 流体力ベクトル：[p] = p_lift + Mf1*dt^2_q + (Mf2_1*(dt_r - Vin - Vwake)^T*dt_ni + Mf2_2) 
Qf_p_global_tv_np1 =  Qf_p_global_t( time + d_t);
%%[1] ( -(τx*dxΓ + τy*dyΓ)*dt_rc ) 
Qf_p_lift2_global_tv_np1 = Qf_p_lift2_global_t( time + d_t);
%%[2] 付加質量マトリックスの線形補間 (Mf1)
Qf_p_mat_global_tv_np1 = Qf_p_mat_global_t( time + d_t);
%%[3] 流体力の線形補間 (Mf2_1)
Qf_p_mat0_global_tv_np1 = Qf_p_mat0_global_t( time + d_t);


Qf_p_mat0_global_t_np1 = Qf_p_mat0_global_tv_np1*( sum( (dt_rc_vec - V_in - V_wake_plate - dt_Amat2_Gamma).*dt_n_vec_i, 2) - dt_Amat1*Gamma);
Qf_p_lift2_global_t_np1 = Qf_p_lift2_global_tv_np1*reshape( dt_rc_vec.', [], 1); 




%%[0] 粘弾性ベクトルの組立 Qe^(n+1)
flag_output = 0;                                                            %% 剛性行列算出の無効化
generate_stiff_matrices;
Qk_global_np1 = Qk_global;
Qd_theta_global_np1 = Qd_theta_global;



%%[*] 付加質量補正解法
%%%
%%% F. Belanger, M.P. Paidoussis, E. de Langre, Time-marching analysis of
%%% fluid-coupled system with large added mass, AIAA Journal, 33 (1995), pp. 752-755.
%%%
if added_mass_compensate_flag
        
    d_M_global = beta_A*(1/mu_m*M_global);
    d_Qf_global = beta_A*(1/mu_m*M_global)*(dt_q_vec - old_dt_q_vec)/d_t;    
end



%%[1-0] 質量行列     : M
m_global_struct.M_global = M_global + d_M_global + J_global_1_n - ( Qf_p_mat_global_tv_n + Qf_p_mat_global_tv_np1 )/2;
%%[1-1] 体積力       : Q_f
qf_global_struct.Qf_global = Qf_global + d_Qf_global + Qf_time_global*q_in_norm( time) ...
                                        + ( Qf_p_global_tv_n + Qf_p_global_tv_np1 )/2 ...
                                        + ( Qf_p_mat0_global_t_n + Qf_p_mat0_global_t_np1 )/2 ...
                                        + ( Qf_p_lift2_global_t_n + Qf_p_lift2_global_t_np1 )/2;
%%[1-2] dq_Qe(q(n))
dq_qe_global_struct.dq_Qe_global = dq_Qe_global_n;
%%[1-3] 剛性力       : Q_e
%%[*] Qe(q(n+1)) = Qe(q(n)) + Δt*dq_Qe(q(n))*dt_q(n+1)
qe_global_struct.Qe_global = Qe_global_n + (Qk_global_n + Qk_global_np1)/2;
%%[1-4] 減衰力       : Q_d
qd_global_struct.Qd_global = Qd_global_n + Qd_theta_global_n + J_global_2_n;


%%[*] Qe(q(n+1)) = Qe(q(n)) + Δt*dq_Qe(q(n))*dt_q(n+1)
new_X_vec = new_X_func_FAST( X_vec, m_global_struct, qf_global_struct, dq_qe_global_struct, qe_global_struct, qd_global_struct, var_param, 1, out1);

h_X_vec(:,i_time+1) = new_X_vec;                                            %% (Qe^(n)+Qe^(n+1))/2の元で解いた X(n+1) 


%% 発散した時は解析を停止
if sum( isnan( X_vec))

    warndlg( 'Divergence!!') 
%     break;
end

